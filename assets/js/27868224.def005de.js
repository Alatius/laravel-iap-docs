"use strict";(self.webpackChunklaravel_in_app_purchase=self.webpackChunklaravel_in_app_purchase||[]).push([[449],{4703:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:2},s="Routing",d={unversionedId:"get-started/routing",id:"get-started/routing",isDocsHomePage:!1,title:"Routing",description:"Introduction",source:"@site/docs/get-started/routing.md",sourceDirName:"get-started",slug:"/get-started/routing",permalink:"/laravel-iap-docs/docs/get-started/routing",editUrl:"https://github.com/imdhemy/laravel-iap-docs/edit/master/docs/get-started/routing.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation and Configuration",permalink:"/laravel-iap-docs/docs/get-started/installation"},next:{title:"Server Notifications",permalink:"/laravel-iap-docs/docs/get-started/server-notifications"}},p=[{value:"Introduction",id:"introduction",children:[]},{value:"Generate a signed URL",id:"generate-a-signed-url",children:[]},{value:"Validating a signed route requests",id:"validating-a-signed-route-requests",children:[]}],u={toc:p};function c(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"routing"},"Routing"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Liap provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"POST")," endpoint ",(0,i.kt)("inlineCode",{parentName:"p"},"liap.serverNotifications")," to receive\nthe ",(0,i.kt)("a",{parentName:"p",href:"/docs/get-started/server-notifications"},"Server notifications")," from different providers. This route uses a query\nvariable ",(0,i.kt)("inlineCode",{parentName:"p"},"provider")," to define the service provider."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Provider"),(0,i.kt)("th",{parentName:"tr",align:null},"URI"),(0,i.kt)("th",{parentName:"tr",align:null},"Query Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Google Play"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"/liap/notifications?provider=google-play")),(0,i.kt)("td",{parentName:"tr",align:null},"google-play")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"App Store"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"/liap/notifications?provider=app-store")),(0,i.kt)("td",{parentName:"tr",align:null},"app-store")))),(0,i.kt)("p",null,"You can add custom configurations to this endpoint through the ",(0,i.kt)("inlineCode",{parentName:"p"},"routing")," key in the config file ",(0,i.kt)("inlineCode",{parentName:"p"},"liap.php"),". For\ninstance, you can assign a ",(0,i.kt)("a",{parentName:"p",href:"https://laravel.com/docs/middleware"},"middleware")," or add a custom route prefix."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"[   \n    'routing' => [\n        'signed' => false,\n        'middleware' => 'my_middleware',\n        'prefix' => 'my_prefix'\n    ],\n    \n    // .. Other configurations are trimmed\n]\n")),(0,i.kt)("h2",{id:"generate-a-signed-url"},"Generate a signed URL"),(0,i.kt)("p",null,'In order to set up the server notifications, the service provider asks you to provide a URL to receive the server\nnotifications. LIAP allows you to easily create a "signed" URL which have a "signature" hash appended to the query\nstring. This allows LIAP/Laravel to verify that the URL has not been modified since it was created.'),(0,i.kt)("p",null,"You can generate them using the following composer command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"php artisan liap:url\n")),(0,i.kt)("h2",{id:"validating-a-signed-route-requests"},"Validating a signed route requests"),(0,i.kt)("p",null,"In order to verify that an incoming request has a valid signature, you should set the ",(0,i.kt)("inlineCode",{parentName:"p"},"routing.signed")," key to true."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"[   \n    'routing' => [\n        'signed' => true, // This is false by default\n    ],\n    \n    // .. Other configurations are trimmed\n]\n")),(0,i.kt)("p",null,"If the incoming request does not have a valid signature, the middleware will automatically return a ",(0,i.kt)("inlineCode",{parentName:"p"},"403")," HTTP response."))}c.isMDXComponent=!0}}]);