"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2013],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(g,a(a({ref:t},l),{},{components:n})):r.createElement(g,a({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8783:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:3,description:"How to test and mock Google Play iap receipts."},a="Testing and Mocking",s={unversionedId:"google-play/testing-and-mocking",id:"google-play/testing-and-mocking",title:"Testing and Mocking",description:"How to test and mock Google Play iap receipts.",source:"@site/docs/google-play/testing-and-mocking.mdx",sourceDirName:"google-play",slug:"/google-play/testing-and-mocking",permalink:"/laravel-iap-docs/docs/google-play/testing-and-mocking",draft:!1,editUrl:"https://github.com/imdhemy/laravel-iap-docs/blob/master/docs/google-play/testing-and-mocking.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"How to test and mock Google Play iap receipts."},sidebar:"tutorialSidebar",previous:{title:"Sell Subscriptions",permalink:"/laravel-iap-docs/docs/google-play/sell-subscriptions"},next:{title:"Usage outside Laravel",permalink:"/laravel-iap-docs/docs/google-play/without-laravel"}},c={},p=[{value:"Testing with a mocked receipt",id:"testing-with-a-mocked-receipt",level:2}],l={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"testing-and-mocking"},"Testing and Mocking"),(0,o.kt)("p",null,"LIAP is build with testing and mocking in mind. This means that you can test your app without actually making a purchase.\nThe only thing you need to do is to mock the receipt or a server notification and then test your app."),(0,o.kt)("h2",{id:"testing-with-a-mocked-receipt"},"Testing with a mocked receipt"),(0,o.kt)("p",null,"Follow the steps below to mock a receipt and test your app."),(0,o.kt)("p",null,"Create an instance from the ",(0,o.kt)("inlineCode",{parentName:"p"},"GuzzleHttp\\Psr7\\Response")," with the required response body, for instance a ",(0,o.kt)("a",{parentName:"p",href:"https://developers.google.com/android-publisher/api-ref/rest/v3/purchases.subscriptions#SubscriptionPurchase"},"subscription purchase resource"),"."),(0,o.kt)("p",null,"If you are looking for a code snippet example, Let's mock an auto-renewing subscription purchase."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\nnamespace Test\\Feature;\n\nuse GuzzleHttp\\Psr7\\Response;\nuse Imdhemy\\GooglePlay\\ClientFactory;\nuse \\Imdhemy\\Purchases\\Facades\\Subscription;\n\n\nclass ExampleTest extends TestCase\n{\n  public function test_example(): void\n  {\n    $responseBody = [\n      "kind" => "androidpublisher#subscriptionPurchase",\n      "startTimeMillis" => "1580000000000",\n      "expiryTimeMillis" => "1580000000000",\n      "autoRenewing" => true,\n      "priceCurrencyCode" => "USD",\n      "priceAmountMicros" => "1000000",\n      "countryCode" => "US",\n       // Other fields are omitted for brevity\n    ];\n\n    $response = new Response(200, [], json_encode($responseBody));\n    $client = ClientFactory::mock($response);\n\n    // use the client to verify the purchase\n    // The returned attributes are the same as the mocked response\n\n    // THE FOLLOWING LINE SHOULD BE IN YOUR CLIENT CODE\n    $receipt = Subscription::googlePlay($client)->id($itemId)->token($token)->get();\n  }\n}\n\n')))}u.isMDXComponent=!0}}]);