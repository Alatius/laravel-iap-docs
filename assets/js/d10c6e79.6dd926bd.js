"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4057],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>v});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(r),v=i,m=u["".concat(p,".").concat(v)]||u[v]||d[v]||a;return r?n.createElement(m,o(o({ref:t},c),{},{components:r})):n.createElement(m,o({ref:t},c))}));function v(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6494:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7462),i=(r(7294),r(3905));const a={sidebar_position:5,description:"How to use App Store IAP outside Laravel."},o="Usage outside Laravel",s={unversionedId:"app-store/without-laravel",id:"app-store/without-laravel",title:"Usage outside Laravel",description:"How to use App Store IAP outside Laravel.",source:"@site/docs/app-store/without-laravel.mdx",sourceDirName:"app-store",slug:"/app-store/without-laravel",permalink:"/laravel-iap-docs/docs/app-store/without-laravel",draft:!1,editUrl:"https://github.com/imdhemy/laravel-iap-docs/blob/master/docs/app-store/without-laravel.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,description:"How to use App Store IAP outside Laravel."},sidebar:"tutorialSidebar",previous:{title:"Testing and Mocking",permalink:"/laravel-iap-docs/docs/app-store/testing-and-mocking"},next:{title:"Google Play Billing",permalink:"/laravel-iap-docs/docs/category/google-play-billing"}},p={},l=[{value:"Installation",id:"installation",level:2},{value:"Receipt Verification",id:"receipt-verification",level:2},{value:"Server Notifications",id:"server-notifications",level:2},{value:"V2 Server Notifications (Recommended)",id:"v2-server-notifications-recommended",level:3},{value:"V1 Server Notifications",id:"v1-server-notifications",level:3}],c={toc:l};function d(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"usage-outside-laravel"},"Usage outside Laravel"),(0,i.kt)("p",null,"If you are not using Laravel, you can still use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/imdhemy/appstore-iap"},"App Store IAP package"),".\nWe will show you how to do this in this section."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"You can install the package via composer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"composer require imdhemy/appstore-iap\n")),(0,i.kt)("h2",{id:"receipt-verification"},"Receipt Verification"),(0,i.kt)("p",null,"To verify a receipt, you need to create an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Verifier")," class and call the ",(0,i.kt)("inlineCode",{parentName:"p"},"verify()")," method. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Verifier"),"\nclass accepts three parameters:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The Http Client, and you should decide which one to use, a production or a sandbox client."),(0,i.kt)("li",{parentName:"ol"},"The receipt data, which is a base64 encoded string."),(0,i.kt)("li",{parentName:"ol"},"The password, which is the shared secret of your app.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Make sure you don't hardcode the ",(0,i.kt)("inlineCode",{parentName:"p"},"password")," in your code, you should use an environment variable instead.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Imdhemy\\AppStore\\ClientFactory;\n\n$client = ClientFactory::create();\n$sandboxClient = ClientFactory::createSandbox();\n\n$receiptData = 'base64 encoded receipt data';\n$password = 'your shared secret'; // don't hardcode this\n\n$verifier = new Verifier($client, $receiptData, $password);\n$excludeOldTransactions = true;\n\n$receipt = $verifier->verify($excludeOldTransactions, $sandboxClient);\n\n// Get the receipt status\n$receiptStatus = $receipt->getStatus();\n\nif ($receiptStatus->isValid()) {\n    // The receipt is valid\n} else {\n    // The receipt is invalid\n}\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can find more about Selling subscriptions and products on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/category/app-store"},"App Store section"),".")),(0,i.kt)("h2",{id:"server-notifications"},"Server Notifications"),(0,i.kt)("p",null,"App Store IAP package supports both ",(0,i.kt)("inlineCode",{parentName:"p"},"v1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"v2")," server notifications. Just make sure which version is set in you App Store\nConnect account. For both versions, you need to create an endpoint or a route to handle the notifications received from the\nApp Store."),(0,i.kt)("h3",{id:"v2-server-notifications-recommended"},"V2 Server Notifications (Recommended)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Imdhemy\\AppStore\\Jws\\Parser;\nuse Imdhemy\\AppStore\\Jws\\AppStoreJwsVerifier;\n\n$signedPayload = $request->getSignedPayload(); // Should be the request body received from the App Store\n$jws = Parser::toJws($signedPayload);\n$verifier = new AppStoreJwsVerifier();\nif ($verifier->verify($jws)) {\n    // The notification is valid\n\n    $decodedPayload = V2DecodedPayload::fromJws($jws);\n    // Then you have access to the notification attributes\n\n} else {\n    // The notification is invalid\n}\n\n")),(0,i.kt)("h3",{id:"v1-server-notifications"},"V1 Server Notifications"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Imdhemy\\AppStore\\ServerNotifications\\ServerNotification;\n\n$attributes = $request->all(); // Should be the request body\n$serverNotification = ServerNotification::fromArray($attributes);\n\n// Then you have access to the notification attributes\n$eventType = $serverNotification->getNotificationType();\n\n// based on the event type, you can get the related attributes\n")))}d.isMDXComponent=!0}}]);